import "../../fastlane/Fastfile"

PLIST_FILE = 'export_options.plist'
PROD_ENV = 'prod'
DEV_ENV = 'dev'
DEFAULT_ENV = PROD_ENV
PROD_BUNDLE_ID = "com.xmartlabs.fluttips"
DEV_BUNDLE_ID = "#{PROD_BUNDLE_ID}.dev"

default_platform(:ios)

provisioning_name = 'fluttips_fastlane'

# https://github.com/fastlane/fastlane/issues/20811
ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'true'

platform :ios do

  desc "Creates a temporal keystore and import the distribution certificate"
  desc "#### Envs\n" +
  "* **`TEMP_KEYCHAIN_NAME`**: The temporal keychain name\n" +
  "* **`TEMP_KEYCHAIN_PASSWORD`**: The temporal keychain password\n" +
  "* **`DIST_CERTIFICATE_PATH`**: The distribution certificate file path.\n" +
  "* **`DIST_CERTIFICATE_PASSWORD`**: The distribution certificate file password. If you are using a cert file this file is not necessary."
  lane :set_signing do
    safe_delete_keychain
    create_keychain(
      name: ENV['TEMP_KEYCHAIN_NAME'],
      password: ENV['TEMP_KEYCHAIN_PASSWORD'],
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )
    import_certificate(
      keychain_name: ENV['TEMP_KEYCHAIN_NAME'],
      keychain_password: ENV['TEMP_KEYCHAIN_PASSWORD'],
      certificate_path: ENV['DIST_CERTIFICATE_PATH'],
      certificate_password: ENV['DIST_CERTIFICATE_PASSWORD'],
    )
  end

  desc "Gets or creates the provisioning profiles and setup the project to use manual signing."
  desc "#### Envs:\n" +
  "* **`APPLE_TEAM_ID`**: The apple team id"
  private_lane :setup_provisioning do |options|
    env = options[:env] || DEFAULT_ENV
    app_identifier = options[:env] == DEV_ENV ? DEV_BUNDLE_ID : PROD_BUNDLE_ID
    build_export_method = options[:build_export_method] || 'app-store'
    adhoc = build_export_method == 'ad-hoc'
    profile_type_name = adhoc ? 'AdHoc' : 'AppStore'

    get_provisioning_profile(
      adhoc: adhoc,
      team_id: ENV['APPLE_TEAM_ID'],
      force: true,
      include_all_certificates: true,
      provisioning_name: "#{provisioning_name}-#{profile_type_name}-#{env}",
      app_identifier: app_identifier,
    )
    update_code_signing_settings(
	  use_automatic_signing: false,
	  path: "Runner.xcodeproj",
	  team_id: ENV['APPLE_TEAM_ID'],
	  build_configurations: "Release-#{env}",
	)
    update_project_team(
      path: "Runner.xcodeproj",
      teamid:  ENV['APPLE_TEAM_ID'],
    )

	update_project_provisioning(
	  xcodeproj: "Runner.xcodeproj",
 	  build_configuration: "Release-#{env}",
	  profile: "./#{profile_type_name}_#{app_identifier}.mobileprovision",
      code_signing_identity: "Apple Distribution"
	)
  end

  private_lane :rollback_provisioning_setup do |options|
    env = options[:env] || DEFAULT_ENV
    update_code_signing_settings(
      use_automatic_signing: true,
      path: "Runner.xcodeproj",
      team_id: ENV['APPLE_TEAM_ID'],
      build_configurations: "Release-#{env}",
      profile_uuid: '',
      code_sign_identity: 'Apple Development',
    )
  end

  desc "Build deploy version"
  desc "#### Envs:\n" +
    "* **`env`**: Environment to build. Default 'prod'\n" +
    "* **`build_export_method`**: Export metod to generate the ipa. Default 'app-store'.\n" +
    "* **`setup_signing`**: if true, `set_signing` is called.\n" +
    "* **`APPLE_TEAM_ID`**: The apple team id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_ID`**: The connect api key id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_ISSUER_ID`**: The connect api key issuer id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_BASE_64_CONTENT`**: The api key base64 content"
  lane :generate_release_ipa do |options|
    upload_symbols = options[:upload_symbols] || true
    include_git_version_suffix = options[:include_git_version_suffix] || false
    sign_enabled = options[:setup_signing] || true
    if sign_enabled
       set_signing
    end

    env = options[:env] || DEFAULT_ENV
    build_export_method = options[:build_export_method] || 'app-store'
    begin
      api_key = app_store_connect_api_key(
        key_id: ENV['APPSTORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV["APPSTORE_CONNECT_API_KEY_ISSUER_ID"],
        key_content: ENV['APPSTORE_CONNECT_API_KEY_BASE_64_CONTENT'],
        is_key_content_base64: true,
        in_house: false,
      )

      setup_provisioning(
        env: env,
        build_export_method: build_export_method,
      )
      build_flutter(
        build_platform: 'ipa',
        build_type: 'release',
        flavor: env,
        include_git_version_suffix: include_git_version_suffix,
        export_method: build_export_method,
      )

      app_identifier = options[:env] == DEV_ENV ? DEV_BUNDLE_ID : PROD_BUNDLE_ID
      build_ios_app(
        clean: false,
        scheme: env,
        export_team_id: ENV['APPLE_TEAM_ID'],
        export_method: build_export_method,
        xcargs: "-allowProvisioningUpdates",
        export_options: {
          compileBitcode: true,
          uploadBitcode: true,
          uploadSymbols: true,
          signingStyle: "manual",
        },
      )
       if upload_symbols
         upload_symbols_to_crashlytics(app_id: options[:firebase_app_id], debug: true)
       end
    ensure
      rollback_provisioning_setup(env: env)
      safe_delete_keychain
    end
  end

  desc "Push a new beta build to Firebase"
  desc "#### Envs:\n" +
    "* **`setup_signing`**: if true, `set_signing` is called.\n" +
    "* **`APPLE_TEAM_ID`**: The apple team id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_ID`**: The connect api key id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_ISSUER_ID`**: The connect api key issuer id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_BASE_64_CONTENT`**: The api key base64 content"
  lane :publish_dev_firebase do |options|
    generate_release_ipa(
      env: 'dev',
      build_export_method: 'ad-hoc',
      firebase_app_id: ENV['FIREBASE_APP_ID_DEV'],
      include_git_version_suffix: true,
    )

    firebase_app_distribution(
      app: ENV['FIREBASE_APP_ID_DEV'],
      service_credentials_file: ENV["FIREBASE_SERVICE_ACCOUNT_FILE"],
      testers: ENV["FIREBASE_TESTERS"],
      groups: ENV["FIREBASE_TESTER_GROUPS"],
      release_notes: generate_snapshot_changelog,
      apk_path: "../Runner.ipa",
    )
  end


  desc "Push a new beta build to TestFlight"
  desc "#### Envs:\n" +
    "* **`setup_signing`**: if true, `set_signing` is called.\n" +
    "* **`APPLE_TEAM_ID`**: The apple team id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_ID`**: The connect api key id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_ISSUER_ID`**: The connect api key issuer id\n" +
    "* **`APPSTORE_CONNECT_API_KEY_BASE_64_CONTENT`**: The api key base64 content"
  lane :publish_prod_testflight do |options|
    generate_release_ipa(
      env: 'prod',
      build_export_method: 'app-store',
      firebase_app_id: ENV['FIREBASE_APP_ID_PROD'],
      include_git_version_suffix: false,
    )
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  private_lane :safe_delete_keychain do
    begin
      FastlaneCore::Helper.keychain_path(ENV['TEMP_KEYCHAIN_NAME'])
      delete_keychain(name: ENV['TEMP_KEYCHAIN_NAME'])
    rescue => ex
      UI.important('Keystore not found')
    end
  end
end
