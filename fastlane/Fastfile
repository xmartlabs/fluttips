opt_out_usage

def compilation_envs
  if File.file?('../.env')
    Dotenv.parse('../.env')
      .map { |key, value| "--dart-define=#{key}=#{value}" }
      .join(' ')
  else
    ''
  end
end

def root_path
  Dir.pwd.sub(/.*\Kfastlane/, '').sub(/.*\Kandroid/, '').sub(/.*\Kios/, '').sub(/.*\K\/\//, '')
end

private_lane :sh_on_root do |options|
  command = options[:command]
  sh("cd #{root_path} && #{command}")
end

private_lane :flutter_command do |options|
  command = options[:command]
  sh_on_root(command: "fvm flutter #{command}")
end

desc "**Clean project**"
private_lane :clean do
  flutter_command(command: "clean")
end

desc "**Fetch flutter dependencies**"
lane :fetch_dependencies do
  flutter_command(command: "pub get --suppress-analytics")
end

desc "**Generate flutter generated code**"
lane :build_autogenerated_code do
  flutter_command(command: "pub run build_runner build --delete-conflicting-outputs")
end

desc "**Lint: Check code format**"
lane :lint_format do
  flutter_command(command: "format --set-exit-if-changed .")
end

desc "**Lint: Check code format**"
lane :lint_check_language_sorting do
  current_content = sh_on_root(command: "cat lib/l10n/intl_en.arb")
  flutter_command(command: "pub run arb_utils:sort lib/l10n/intl_en.arb")
  new_content = sh_on_root(command: "cat lib/l10n/intl_en.arb")
  unless current_content == new_content
    UI.user_error!("Language file is not sorted")
  end
end

desc "**Lint: Analyze code**"
lane :lint_analyze do
  flutter_command(command: "analyze .")
end

desc "**Lint: Code metrics**"
lane :lint_code_metrics do
  result = flutter_command(command: "pub run dart_code_metrics:metrics analyze lib  --fatal-style --fatal-performance --fatal-warnings")
  UI.message(result)
  unless result.include? "✔ no issues found!"
    UI.user_error!("Code metrics error happened")
  end

  flutter_command(command: "pub run dart_code_metrics:metrics check-unused-code lib --fatal-unused")
  flutter_command(command: "pub run dart_code_metrics:metrics check-unused-files lib --fatal-unused")
end


desc "**Run linters**"
lane :lints do
  lint_format
  lint_check_language_sorting
  lint_analyze
  lint_code_metrics
end

desc "**Check generated code is fine**"
lane :ensure_no_change_in_generated_code do
  build_autogenerated_code
  ensure_git_status_clean(show_diff: true)
end

desc "**Run tests**"
lane :tests do |options|
  flutter_command(command: "test --no-pub --coverage --suppress-analytics")
end

desc "**Clean up project**"
lane :clean_up do
  clean
  fetch_dependencies
  build_autogenerated_code
end

lane :build_flutter do |options|
  build_type = options[:build_type] || ''
  if !build_type.empty?
    build_type = "--#{build_type}"
  end

  sign_enabled = options[:sign_enabled] || true
  sign_param = sign_enabled ? '' : '--no-codesign'

  build_platform = options[:build_platform]

  config_only = options[:config_only] || false
  flavor = options[:flavor] || 'dev'
  config_param = config_only ? '--config-only' : ''

  include_git_version_suffix = options[:include_git_version_suffix] || false
  version_suffix = include_git_version_suffix ? "-#{last_git_commit[:abbreviated_commit_hash]}" : ''
  version_name = flutter_version()["version_name"] + version_suffix

  flutter_command(command: "build #{build_platform} --suppress-analytics #{build_type} #{sign_param} #{config_param} --flavor #{flavor} --dart-define=ENV=#{flavor} --build-name #{version_name}")
end

private_lane :generate_snapshot_changelog do
  changelog_from_git_commits(
     between: ["HEAD^", "HEAD"],
     pretty: "%s%n%nAuthor: %an <%ae>",
     date_format: "short",
  )
  header = Actions.lane_context[SharedValues::FL_CHANGELOG]
  changelog_from_git_commits(
    between: ["HEAD~10", "HEAD^"],
    pretty: "• %s",
    date_format: "short",
  )
  body = Actions.lane_context[SharedValues::FL_CHANGELOG]
    .split("\n")[0..10]
    .join("\n")
  ENV["CHANGELOG"] = "#{header}\n\nLast changes:\n#{body}"
  ENV["CHANGELOG"]
end
