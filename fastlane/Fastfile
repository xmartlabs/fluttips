opt_out_usage
fastlane_require 'dotenv'

def compilation_envs
  if File.file?("#{root_path}/.env")
    Dotenv.parse("#{root_path}/.env")
      .map { |key, value| "--dart-define=#{key}=#{value}" }
      .join(' ')
  else
    ''
  end
end

def root_path
  Dir.pwd.sub(/.*\Kfastlane/, '').sub(/.*\Kandroid/, '').sub(/.*\Kweb/, '').sub(/.*\Kios/, '').sub(/.*\K\/\//, '')
end

lane :sh_on_root do |options|
  command = options[:command]
  sh("cd #{root_path} && #{command}")
end

private_lane :flutter_command do |options|
  command = options[:command]
  sh_on_root(command: "fvm flutter #{command}")
end

desc "**Clean project**"
private_lane :clean do
  flutter_command(command: "clean")
end

desc "**Fetch flutter dependencies**"
lane :fetch_dependencies do
  flutter_command(command: "pub get --suppress-analytics")
end

desc "**Generate flutter generated code**"
lane :build_autogenerated_code do
  flutter_command(command: "pub run build_runner build --delete-conflicting-outputs")
end

desc "**Lint: Check code format**"
lane :lint_format do
  flutter_command(command: "format --set-exit-if-changed .")
end

desc "**Lint: Analyze code**"
lane :lint_analyze do
  flutter_command(command: "analyze .")
end

desc "**Run linters**"
lane :lints do
  lint_format
  lint_check_language_sorting
  lint_analyze
end

desc "**Check generated code is fine**"
lane :ensure_no_change_in_generated_code do
  build_autogenerated_code
  ensure_git_status_clean(show_diff: true)
end

desc "**Run tests**"
lane :tests do |options|
  flutter_command(command: "test --no-pub --coverage --suppress-analytics")
end

desc "**Clean up project**"
lane :clean_up do
  clean
  fetch_dependencies
  build_autogenerated_code
end

lane :build_flutter do |options|
  build_type = options[:build_type] || ''
  if !build_type.empty?
    build_type = "--#{build_type}"
  end

  sign_param = options.fetch(:sign_enabled, true) ? '' : '--no-codesign'

  build_platform = options[:build_platform]

  config_only = options[:config_only] || false
  flavor = options[:flavor] || 'dev'
  config_param = config_only ? '--config-only' : ''

  version_name = calculate_version_name(
    include_git_version_suffix: options[:include_git_version_suffix] || false
  )

  export_method = options[:export_method] || ''
  if !export_method.empty?
    export_method = "--export-method #{export_method}"
  end

  flavour_arg = options[:export_method] || ''
  if build_platform != 'web'
    flavour_arg = " --flavor #{flavor}"
  end

  flutter_command(command: "build #{build_platform} #{build_type} --suppress-analytics #{sign_param} #{config_param} #{flavour_arg} --dart-define=ENV=#{flavor} --build-name #{version_name} #{export_method} #{compilation_envs}")
end

private_lane :calculate_version_name do |options|
  include_git_version_suffix = options[:include_git_version_suffix] || false
  version_suffix = include_git_version_suffix ? "-#{last_git_commit[:abbreviated_commit_hash]}" : ''
  version_name = flutter_version()["version_name"] + version_suffix
end

private_lane :generate_snapshot_changelog do
  changelog_from_git_commits(
     between: ["HEAD^", "HEAD"],
     pretty: "%s%n%nAuthor: %an <%ae>",
     date_format: "short",
  )
  header = Actions.lane_context[SharedValues::FL_CHANGELOG]
  changelog_from_git_commits(
    between: ["HEAD~10", "HEAD^"],
    pretty: "â€¢ %s",
    date_format: "short",
  )
  body = Actions.lane_context[SharedValues::FL_CHANGELOG]
    .split("\n")[0..10]
    .join("\n")
  ENV["CHANGELOG"] = "#{header}\n\nLast changes:\n#{body}"
  ENV["CHANGELOG"]
end
